[[
  name: _th_set_
  cname: set
  variants: function
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  device_guard: False
  return: argument 0
  options:
    - cname: set
      scalar_check: source_->dim() == 0
      arguments:
        - THTensor* self
        - THTensor* source
    - cname: setStorage
      scalar_check: False
      arguments:
        - THTensor* self
        - CONSTANT NULL, 0, {0}, {}
    - cname: setStorage
      scalar_check: False
      arguments:
        - THTensor* self
        - THStorage* source
        - CONSTANT 0
        - CONSTANT {static_cast<int64_t>(source.size())}
        - CONSTANT {}
    - cname: setStorage
      arguments:
        - THTensor* self
        - THStorage* source
        - long storage_offset
        - IntArrayRefSize size
        - arg: IntArrayRef stride
          default: {}
]]
[[
  name: _th_fill_
  return: self
  cname: fill
  variants: function
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  options:
    - arguments:
      - THTensor* self
      - real value
    - zero_dim_tensor_only: True
      arguments:
      - THTensor* self
      - THTensor* value
]]
[[
  name: _th_is_set_to
  cname: isSetTo
  variants:
    - function
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  device_guard: False
  return: bool
  arguments:
    - THTensor* self
    - THTensor* tensor
]]
[[
  name: _th_masked_fill_
  cname: maskedFill
  variants: function
  return: self
  options:
    - arguments:
      - arg: THTensor* self
        broadcast: mask inplace fallback types:Byte
      - THByteTensor* mask
      - real value
    - zero_dim_tensor_only: True
      arguments:
      - arg: THTensor* self
        broadcast: mask inplace fallback types:Byte
      - THByteTensor* mask
      - THTensor* value
]]
[[
  name: _th_masked_scatter_
  cname: maskedCopy
  variants: function
  return: self
  arguments:
    - arg: THTensor* self
      broadcast: mask inplace fallback types:Byte
    - THByteTensor* mask
    - THTensor* source
]]
[[
  name: _th_masked_select
  cname: maskedSelect
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THTensor* self
      broadcast: mask fallback types:Byte
    - THByteTensor* mask
]]
[[
  name: _th_nonzero
  cname: nonzero
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THIndexTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_clone
  cname: newClone
  return: THTensor*
  variants:
    - function
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  arguments:
    - THTensor* self
]]
[[
  name: _th_view
  cname: newView
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  device_guard: False
  return: THTensor*
  arguments:
    - THTensor* self
    - arg: IntArrayRefSize size
      long_args: True
]]
[[
  name: _th_resize_as_
  cname: resizeAs
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: self
  scalar_check: the_template_->dim() == 0
  arguments:
    - THTensor* self
    - THTensor* the_template
]]
[[
  name: _th_index_select
  cname: indexSelect
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long dim
      wrap_dim: self
    - THIndexTensor* index
]]
[[
  name: _th_index_copy_
  cname: indexCopy
  variants: function
  return: argument 0
  arguments:
    - THTensor* self
    - arg: long dim
      wrap_dim: self
    - THIndexTensor* index
    - THTensor* source
]]
[[
  name: _th_take
  cname: take
  variants:
    - function
  return: argument 0
  scalar_check: index_->dim() == 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THIndexTensor* index
]]
[[
  name: _th_put_
  cname: put
  variants: function
  backends:
    - CPU
    - CUDA
  return: argument 0
  arguments:
    - THTensor* self
    - THIndexTensor* index
    - THTensor* source
    - arg: bool accumulate
      default: "false"
]]
[[
  name: _th_index_add_
  cname: indexAdd
  variants: function
  return: argument 0
  arguments:
    - THTensor* self
    - arg: long dim
      wrap_dim: self
    - THIndexTensor* index
    - THTensor* source
]]
[[
  name: _th_index_fill_
  cname: indexFill
  variants: function
  return: argument 0
  options:
    - arguments:
      - THTensor* self
      - arg: long dim
        wrap_dim: self
      - THIndexTensor* index
      - real value
    - zero_dim_tensor_only: True
      arguments:
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - THIndexTensor* index
        - THTensor* value
]]
[[
  name: _th_unfold
  cname: unfold
  variants:
    - function
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  device_guard: False
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long dimension
      wrap_dim: self
    - long size
    - long step
]]
[[
  name: _th_scatter_
  return: argument 0
  variants: function
  options:
    - cname: scatter
      arguments:
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - THIndexTensor* index
        - THTensor* src
    - cname: scatterFill
      arguments:
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - THIndexTensor* index
        - real value
]]
[[
  name: _th_scatter_add_
  return: argument 0
  cname: scatterAdd
  variants: function
  arguments:
    - THTensor* self
    - arg: long dim
      wrap_dim: self
    - THIndexTensor* index
    - THTensor* src
]]
[[
  name: _th_gather
  cname: gather
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
      resize: index
    - THTensor* self
    - arg: long dim
      wrap_dim: self
    - THIndexTensor* index
]]
[[
  name: _th_equal
  cpu_bool: True
  cname: equal
  variants:
    - function
  return: bool
  arguments:
    - THTensor* self
    - THTensor* other
]]
[[
  name: _th_and
  cname: __and__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitand
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: cbitand
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_iand_
  cname: __iand__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitand
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: cbitand
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_or
  cname: __or__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitor
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: cbitor
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_ior_
  cname: __ior__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitor
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: cbitor
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_xor
  cname: __xor__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitxor
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: cbitxor
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_ixor_
  cname: __ixor__
  variants:
    - function
  return: argument 0
  options:
    - cname: bitxor
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: cbitxor
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_lshift
  cname: __lshift__
  variants:
    - function
  return: argument 0
  options:
    - cname: lshift
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: clshift
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_ilshift_
  cname:: __ilshift__
  variants:
    - function
  return: argument 0
  options:
    - cname: lshift
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: clshift
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_rshift
  cname: __rshift__
  variants:
    - function
  return: argument 0
  options:
    - cname: rshift
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: crshift
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_irshift_
  cname: __irshift__
  variants:
    - function
  return: argument 0
  options:
    - cname: rshift
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: crshift
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_lt
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: ltValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: ltTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_lt_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: ltValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: ltTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - arg: THTensor* other
]]
[[
  name: _th_gt
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: gtValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: gtTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_gt_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: gtValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: gtTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_le
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: leValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: leTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_le_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: leValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: leTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_ge
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: geValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: geTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_ge_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: geValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: geTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_eq
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: eqValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: eqTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_eq_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: eqValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: eqTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_ne
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  return: argument 0
  options:
    - cname: neValue
      arguments:
        - arg: THByteTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: neTensor
      arguments:
        - arg: THByteTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_ne_
  cpu_bool: True
  cuda_bool: True
  return: self
  variants: function
  options:
    - cname: neValueT
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: neTensorT
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_min
  variants:
    - function
  options:
    - cname: minall
      return: real
      arguments:
        - THTensor* self
    - cname: cmin
      return: argument 0
      arguments:
      - arg: THTensor* result
        output: True
      - arg: THTensor* self
        broadcast: other fallback
      - THTensor* other
]]
[[
  name: _th_min
  variants: function
  options:
    - cname: min
      return: argument 0,1
      scalar_check: self_->dim() == 0 || (keepdim == false && self_->dim() == 1)
      arguments:
        - arg: THTensor* min
          output: True
        - arg: THIndexTensor* min_indices
          output: True
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - arg: bool keepdim
          default: "false"
]]
[[
  name: _th_max
  variants:
    - function
  options:
    - cname: maxall
      return: real
      arguments:
        - THTensor* self
    - cname: cmax
      return: argument 0
      arguments:
      - arg: THTensor* result
        output: True
      - arg: THTensor* self
        broadcast: other fallback
      - THTensor* other
]]
[[
  name: _th_max
  variants: function
  options:
    - cname: max
      return: argument 0,1
      scalar_check: self_->dim() == 0 || (keepdim == false && self_->dim() == 1)
      arguments:
        - arg: THTensor* max
          output: True
        - arg: THIndexTensor* max_indices
          output: True
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - arg: bool keepdim
          default: "false"
]]
[[
  name: _th_mode
  variants: function
  cname: mode
  return: argument 0,1
  scalar_check: self_->dim() == 0|| (keepdim == false && self_->dim() == 1)
  arguments:
    - arg: THTensor* values
      output: True
    - arg: THIndexTensor* indices
      output: True
    - THTensor* self
    - arg: long dim
      wrap_dim: self
      default: __last_dim
    - arg: bool keepdim
      default: "false"
]]
[[
  name: _th_sort
  cname: sort
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* values
      output: True
    - arg: THIndexTensor* indices
      output: True
    - THTensor* self
    - arg: long dim
      default: __last_dim
      wrap_dim: self
    - arg: bool descending
      default: "false"
]]
[[
  name: _th_topk
  cname: topk
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* values
      output: True
    - arg: THIndexTensor* indices
      output: True
    - THTensor* self
    - long k
    - arg: long dim
      default: __last_dim
      wrap_dim: self
    - arg: bool largest
      default: "true"
    - arg: bool sorted
      default: "true"
]]
[[
  name: _th_abs
  cname: abs
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_sigmoid
  types:
    - floating_point
  backends:
    - CUDA
  cname: sigmoid
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_log
  cname: log
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_log10
  cname: log10
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_log1p
  cname: log1p
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_log2
  cname: log2
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_lgamma
  cname: lgamma
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_lgamma_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: lgamma
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
]]
[[
  name: _th_digamma
  cname: digamma
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_digamma_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: digamma
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
]]
[[
  name: _th_polygamma
  cname: polygamma
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - int64_t n
    - THTensor* self
]]
[[
  name: _th_polygamma_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: polygamma
  variants: function
  return: self
  arguments:
    - THTensor* self
    - int64_t n
    - THTensor* self
]]
[[
  name: _th_exp
  cname: exp
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_expm1
  cname: expm1
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_cos
  cname: cos
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_acos
  cname: acos
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_cosh
  cname: cosh
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_sin
  cname: sin
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_asin
  cname: asin
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_sinh
  cname: sinh
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_tan
  cname: tan
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_atan
  cname: atan
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_tanh
  cname: tanh
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_erf
  cname: erf
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_erfc
  cname: erfc
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_erfinv_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: erfinv
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
]]
[[
  name: _th_erfinv
  cname: erfinv
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_sqrt
  cname: sqrt
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_rsqrt
  cname: rsqrt
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_ceil
  cname: ceil
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_floor
  cname: floor
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_round
  cname: round
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_trunc
  cname: trunc
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_frac_
  types:
    - floating_point
  backends:
    - CUDA
  cname: frac
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
]]
[[
  name: _th_frac
  cname: frac
  types:
    - floating_point
  backends:
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_var
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants: function
  options:
    - cname: varall
      return: accreal
      arguments:
        - THTensor* self
        - arg: bool unbiased
          if_true: 0
          if_false: 1
          default: 0
    - cname: var
      return: argument 0
      scalar_check: self_->dim() == 0 || (keepdim == false && self_->dim() == 1)
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - arg: bool unbiased
          if_true: 0
          if_false: 1
          default: 0
        - arg: bool keepdim
          default: "false"
]]
[[
  name: _th_std
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants: function
  options:
    - cname: stdall
      return: accreal
      arguments:
        - THTensor* self
        - arg: bool unbiased
          if_true: 0
          if_false: 1
          default: 0
    - cname: std
      return: argument 0
      scalar_check: self_->dim() == 0 || (keepdim == false && self_->dim() == 1)
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - arg: long dim
          wrap_dim: self
        - arg: bool unbiased
          if_true: 0
          if_false: 1
          default: 0
        - arg: bool keepdim
          default: "false"
]]
[[
  name: _th_renorm
  cname: renorm
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - real p
    - arg: long dim
      wrap_dim: self
    - real maxnorm
]]
[[
  name: _th_renorm_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: renorm
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
    - real p
    - arg: long dim
      wrap_dim: self
    - real maxnorm
]]
[[
  name: _th_dist
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  options:
    - cname: dist
      return: accreal
      arguments:
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
        - arg: real p
          default: AS_REAL(2)
]]
[[
  name: _th_reciprocal
  types:
    - floating_point
  backends:
    - CUDA
  variants:
    - function
  options:
    - cname: cinv
      return: argument 0
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
]]
[[
  name: _th_reciprocal_
  types:
    - floating_point
  backends:
    - CUDA
  variants: function
  options:
    - cname: cinv
      return: self
      arguments:
        - THTensor* self
        - THTensor* self
]]
[[
  name: _th_neg
  backends:
    - CUDA
  variants:
    - function
  options:
    - cname: neg
      return: argument 0
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
]]
[[
  name: _th_neg_
  backends:
    - CUDA
  variants: function
  options:
    - cname: neg
      return: self
      arguments:
        - THTensor* self
        - THTensor* self
]]
[[
  name: _th_atan2
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  cname: atan2
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THTensor* self
      broadcast: other fallback
    - THTensor* other
]]
[[
  name: _th_atan2_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: atan2
  variants: function
  return: argument 0
  arguments:
    - THTensor* self
    - arg: THTensor* self
      broadcast: other fallback inplace
    - THTensor* other
]]
[[
  name: _th_pow
  cname: pow
  variants:
    - function
  return: argument 0
  options:
    - cname: pow
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real exponent
]]
[[
  name: _th_pow
  variants:
    - function
  return: argument 0
  options:
    - cname: cpow
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: exponent fallback
        - THTensor* exponent
]]
[[
  name: _th_pow
  variants:
    - function
  return: argument 0
  options:
    - cname: tpow
      arguments:
        - arg: THTensor* result
          output: True
        - real self
        - THTensor* exponent
]]
[[
  name: _th_pow_
  return: argument 0
  cname: pow
  variants: function
  options:
    - cname: pow
      arguments:
        - THTensor* self
        - THTensor* self
        - real exponent
    - cname: cpow
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: exponent inplace fallback
        - THTensor* exponent
]]
[[
  name: _th_histc
  cname: histc
  types:
    - Float
    - Double
  backends:
    - CPU
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long bins
      default: 100
    - arg: real min
      default: 0
    - arg: real max
      default: 0
]]
[[
  name: _th_zero_
  cname: zero
  return: self
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  arguments:
    - THTensor* self
]]
[[
  name: _th_cumsum
  cname: cumsum
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long dim
      wrap_dim: self
]]
[[
  name: _th_cumprod
  cname: cumprod
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long dim
      wrap_dim: self
]]
[[
  name: _th_sign
  cname: sign
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
]]
[[
  name: _th_sign_
  cname: sign
  variants: function
  return: self
  arguments:
    - THTensor* self
    - THTensor* self
]]
[[
  name: _th_trace
  cname: trace
  variants:
    - function
  return: accreal
  arguments:
    - THTensor* self
]]
[[
  name: _th_fmod
  return: argument 0
  variants:
    - function
  options:
    - cname: fmod
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: cfmod
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - THTensor* other
]]
[[
  name: _th_fmod_
  return: argument 0
  variants: function
  options:
    - cname: fmod
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: cfmod
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_remainder
  return: argument 0
  variants:
    - function
  options:
    - cname: remainder
      arguments:
        - arg: THTensor* result
          output: True
        - THTensor* self
        - real other
    - cname: cremainder
      arguments:
        - arg: THTensor* result
          output: True
        - arg: THTensor* self
          broadcast: other fallback
        - arg: THTensor* other
]]
[[
  name: _th_remainder_
  return: argument 0
  variants: function
  options:
    - cname: remainder
      arguments:
        - THTensor* self
        - THTensor* self
        - real other
    - cname: cremainder
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: other inplace fallback
        - THTensor* other
]]
[[
  name: _th_clamp
  cname: clamp
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - real min
    - real max
]]
[[
  name: _th_clamp_min
  cname: cmaxValue
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - real min
]]
[[
  name: _th_clamp_max
  cname: cminValue
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - real max
]]
[[
  name: _th_dot
  backend_types: {CUDA: [floating_point], CPU: [all]}
  cname: dot
  variants: function
  return: accreal
  arguments:
    - arg: THTensor* self
    - arg: THTensor* tensor
]]
[[
  name: _th_cross_kernel
  cname: crossKernel
  variants:
    - function
  backends:
    - CUDA
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THTensor* other
    - arg: int64_t dim
]]
[[
  name: _th_diag
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - arg: long diagonal
      default: 0
  aten_custom_call: |
    if (self_->dim() == 0) {
      throw std::runtime_error("Input must be 1-d or 2-d");
    }
    ${THTensor}_diag(${state,}result_, self_, diagonal);
    result_->maybe_zero_dim(self_->dim() == 0);
]]
[[
  name: _th_addmm
  cname: addmm
  variants:
    - function
  return: argument 0
  options:
    - arguments:
      - arg: THTensor* result
        output: True
      - arg: real beta
        default: AS_REAL(1)
        kwarg_only: True
      - arg: THTensor* self
        broadcast: mat1,mat2 dims:mat1.dim0,mat2.dim1
      - arg: real alpha
        default: AS_REAL(1)
        kwarg_only: True
      - THTensor* mat1
      - THTensor* mat2
]]
[[
  name: _th_addmm_
  variants: [function]
  return: self
  options:
    - cname: addmm
      arguments:
      - THTensor* self
      - arg: real beta
        default: AS_REAL(1)
        kwarg_only: True
      - THTensor* self
      - arg: real alpha
        default: AS_REAL(1)
        kwarg_only: True
      - THTensor* mat1
      - THTensor* mat2
]]
[[
  name: _th_addmv
  cname: addmv
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - arg: THTensor* self
      broadcast: mat,vec dims:mat.dim0
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* mat
    - THTensor* vec
]]
[[
  name: _th_addmv_
  cname: addmv
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* self
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* mat
    - THTensor* vec
]]
[[
  name: _th_addr
  cname: addr
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - arg: THTensor* self
      broadcast: vec1,vec2 dims:vec1.dim0,vec2.dim0
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* vec1
    - THTensor* vec2
]]
[[
  name: _th_addr_
  cname: addr
  return: self
  variants: function
  arguments:
    - THTensor* self
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* self
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* vec1
    - THTensor* vec2
]]
[[
  name: _th_ger
  cname: addr
  variants: function
  return: argument 0
  scalar_check: False
  arguments:
    - arg: THTensor* result
      output: True
      resize: [ [self,0], [vec2,0] ]
      resize_scalar: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THTensor* self
    - THTensor* vec2
]]
[[
  name: _th_mv
  cname: addmv
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
      resize: [ [self, 0] ]
      cpu_zero: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THTensor* self
    - THTensor* vec
]]
[[
  name: _th_mm
  variants: function
  return: argument 0
  options:
    - cname: addmm
      arguments:
        - arg: THTensor* result
          output: True
          resize: [ [self, 0], [mat2,1] ]
          cpu_zero: True
        - CONSTANT AS_REAL(0)
        - argument 0
        - CONSTANT AS_REAL(1)
        - THTensor* self
        - THTensor* mat2
]]
[[
  name: _th_bmm
  cname: baddbmm
  variants:
    - function
  backends:
    - CUDA
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
      resize: [ [self,0], [self,1], [mat2,2] ]
      cpu_zero: True
    - CONSTANT AS_REAL(0)
    - argument 0
    - CONSTANT AS_REAL(1)
    - THTensor* self
    - THTensor* mat2
]]
[[
  name: _th_addbmm
  cname: addbmm
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - arg: THTensor* self
      broadcast: batch1,batch2 dims:batch1.dim1,batch2.dim2
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* batch1
    - THTensor* batch2
]]
[[
  name: _th_addbmm_
  cname: addbmm
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* self
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* batch1
    - THTensor* batch2
]]
[[
  name: _th_baddbmm
  cname: baddbmm
  variants:
    - function
  backends:
    - CUDA
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: real beta
      default: AS_REAL(1)
      kwarg_only: True
    - arg: THTensor* self
      broadcast: batch1,batch2 dims:batch1.dim0,batch1.dim1,batch2.dim2
    - arg: real alpha
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* batch1
    - THTensor* batch2
]]
[[
  name: _th_addcmul
  cname: addcmul
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THTensor* self
      broadcast: tensor1,tensor2 fallback
    - arg: real value
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* tensor1
    - THTensor* tensor2
]]
[[
  name: _th_addcmul_
  options:
    - cname: addcmul
      variants: function
      return: argument 0
      arguments:
        - THTensor* self
        - arg: THTensor* self
          broadcast: tensor1,tensor2 inplace fallback
        - arg: real value
          default: AS_REAL(1)
          kwarg_only: True
        - THTensor* tensor1
        - THTensor* tensor2
    - cname: spaddcmul
      variants: function
      return: argument 0
      arguments:
        - THTensor* self
        - THTensor* self
        - arg: real value
          default: AS_REAL(1)
          kwarg_only: True
        - THSTensor* tensor1
        - THSTensor* tensor2
]]
[[
  name: _th_addcdiv
  cname: addcdiv
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - arg: THTensor* self
      broadcast: tensor1,tensor2 fallback
    - arg: real value
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* tensor1
    - THTensor* tensor2
]]
[[
  name: _th_addcdiv_
  cname: addcdiv
  variants: function
  return: argument 0
  arguments:
    - THTensor* self
    - arg: THTensor* self
      broadcast: tensor1,tensor2 inplace fallback
    - arg: real value
      default: AS_REAL(1)
      kwarg_only: True
    - THTensor* tensor1
    - THTensor* tensor2
]]
[[
  name: _th_gels
  cname: gels
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - THTensor* self
    - THTensor* A
]]
[[
  name: _th_symeig
  cname: syev
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - THTensor* self
    - arg: bool eigenvectors
      if_true: V
      if_false: N
      default: N
    - arg: bool upper
      if_true: U
      if_false: L
      default: U
]]
[[
  name: _th_eig
  cname: geev
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - THTensor* self
    - arg: bool eigenvectors
      if_true: V
      if_false: N
      default: N
]]
[[
  name: _th_svd
  cname: gesdd
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1,2
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - arg: THTensor* res3
      output: True
    - THTensor* self
    - arg: bool some
      if_true: S
      if_false: A
      default: S
    - arg: bool compute_uv
      if_true: S
      if_false: N
      default: S
]]
[[
  name: _th_getri_single
  cname: getri
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants: function
  return: argument 0
  arguments:
    - arg: THTensor* output
      output: True
    - THTensor* self
]]
[[
  name: _th_potri
  cname: potri
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* output
      output: True
    - THTensor* self
    - arg: bool upper
      if_true: U
      if_false: L
      default: U
]]
[[
  name: _th_pstrf
  cname: pstrf
  types:
    - Float
    - Double
  backends:
    - CPU
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THIntegerTensor* res2
      output: True
    - THTensor* self
    - arg: bool upper
      if_true: U
      if_false: L
      default: U
    - arg: real tol
      default: -1
  aten_custom_call: |
    ${THTensor}_pstrf(res1_, res2_, self_, (upper) ? "U" : "L", tol_);
    res2 -= 1;  // LAPACK returns 1-indexed pivots
]]
[[
  name: _th_qr
  cname: qr
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - THTensor* self
]]
[[
  name: _th_geqrf
  cname: geqrf
  types:
    - Float
    - Double
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0,1
  arguments:
    - arg: THTensor* res1
      output: True
    - arg: THTensor* res2
      output: True
    - THTensor* self
]]
[[
  name: _th_orgqr
  cname: orgqr
  types:
    - Float
    - Double
  backends:
    - CPU
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THTensor* input2
]]
[[
  name: _th_ormqr
  cname: ormqr
  types:
    - Float
    - Double
  backends:
    - CPU
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THTensor* input2
    - THTensor* input3
    - arg: bool left
      if_true: L
      if_false: R
      default: L
    - arg: bool transpose
      if_true: T
      if_false: N
      default: N
]]
[[
  name: _th_btrisolve
  cname: btrisolve
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THTensor* result
      output: True
    - THTensor* self
    - THTensor* LU_data
    - THIntegerTensor* LU_pivots
]]
[[
  name: _th_random_
  backends:
    - CPU
    - CUDA
  return: self
  variants: function
  cpu_bool: True
  cuda_bool: True
  options:
    - cname: random
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
    - cname: cappedRandom
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
        - int64_t to
    - cname: clampedRandom
      arguments:
        - THTensor* self
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
        - int64_t from
        - int64_t to
]]
[[
  name: _th_multinomial_alias_setup
  cname: multinomialAliasSetup
  variants:
    - function
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  return: argument 1,2
  arguments:
    - arg: THTensor* probs
    - arg: THIndexTensor* J
      output: True
    - arg: THTensor* q
      output: True
]]
[[
  name: _th_multinomial_alias_draw
  cname: multinomialAliasDraw
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THIndexTensor* result
      output: True
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - THTensor* q
    - THIndexTensor* J
    - long num_samples
]]
[[
  name: _th_multinomial
  cname: multinomial
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  variants:
    - function
  return: argument 0
  arguments:
    - arg: THIndexTensor* result
      output: True
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - THTensor* self
    - long num_samples
    - arg: bool replacement
      default: "false"
]]
[[
  name: _th_uniform_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: uniform
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - arg: double from
      default: 0
    - arg: double to
      default: 1
]]
[[
  name: _th_normal
  cname: normal
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  return: argument 0
  variants:
    - function
  options:
    - cname: normal_means
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
        - THTensor* mean
        - arg: double std
          default: 1
    - cname: normal_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
        - arg: double mean
        - THTensor* std
    - cname: normal_means_stddevs
      arguments:
        - arg: THTensor* output
          output: True
        - arg: THGenerator* generator
          default: nullptr
          kwarg_only: True
        - THTensor* mean
        - THTensor* std
]]
[[
  name: _th_normal_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: normal
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - arg: double mean
      default: 0
    - arg: double std
      default: 1
]]
[[
  name: _th_cauchy_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: cauchy
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - arg: double median
      default: 0
    - arg: double sigma
      default: 1
]]
[[
  name: _th_log_normal_
  cname: logNormal
  variants: function
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - arg: double mean
      default: 1
    - arg: double std
      default: 2
]]
[[
  name: _th_exponential_
  types:
    - floating_point
  backends:
    - CPU
    - CUDA
  cname: exponential
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - arg: double lambd
      default: 1
]]
[[
  name: _th_geometric_
  backends:
    - CPU
    - CUDA
  cname: geometric
  variants: function
  return: self
  arguments:
    - THTensor* self
    - arg: THGenerator* generator
      default: nullptr
      kwarg_only: True
    - double p
]]
[[
  name: _th_dirichlet_grad
  types:
    - floating_point
  backends:
    - CPU
  return: argument 0
  variants:
    - function
  options:
    - cname: dirichlet_grad
      arguments:
        - arg: THTensor* output
          output: True
        - THTensor* x
        - THTensor* alpha
        - THTensor* total
]]

# In theory, this could be a part of the above declaration. But in
# practice this leads to all sorts of problems with ambiguous overloads.
# So we add it here with a separate name.
[[
  name: _th_alias
  return: THTensor*
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  variants:
    - function
  options:
    - cname: newWithTensor
      arguments:
        - THTensor* self
]]
[[
  name: _th_copy_ignoring_overlaps_
  cname: copyIgnoringOverlaps
  return: self
  variants: function
  backends:
    - CUDA
  arguments:
    - THTensor* self
    - THTensor* src
]]

[[
  name: _th_cat
  cname: catArray
  variants: [function]
  cpu_half: True
  cpu_bool: True
  cuda_bool: True
  return: self
  arguments:
    - arg: THTensor* self
      output: True
    - TensorList tensors
    - arg: int64_t dim
      default: 0
]]
